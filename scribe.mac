| scribe.mac - Sym 9.4.2012
| Updated 05/07/2021 by Sic
|	Fixed issue that would cause Pal, Shd, Bst, Rng, and Brd to potentially buy spells they already have.
| Updated 11/09/2020 by Lemons
|	Added support for Emu servers
| Updated 01/14/2018 ~ Chatwiththisname
|	Corrected multiple /next var in /for loops. 
|	Open all bags before entering for loop
|	Added 5ms delay after opening bag in for loop to allow it to populate. 
| Updated 12.22.2013
| Buys all available spells and tomes for specified level range (default is level 1 to current level) if a merchant window is open
| It will not buy lower rank spells than you already have. If you have a rk. ii spell it will not buy a rk. i of the same name, but would buy a rk. iii if it was available.
| when finished buying, or if no window open it scribes every available spell/tome found in inventory (regardless of level range given)
|
| It will now loop and keep buying/scribing if you run out of inventory space before you run out of spells to buy.
|
|
| Usage: /mac scribe minlevel maxlevel
|
| /mac scribe 10 20
| ^^ This will buy all spells/tomes from levels 10 to 20 from the current merchant
|
| /mac scribe
| ^^ This will buy all spells/tomes from level 1 to your current level from the current merchant
|
| /mac scribe 30
| ^^ This will buy all spells/tomes from level 30 to your current level from the current merchant
|

	#event FullInventory "#*#Your inventory appears full!#*#"
	#event NotGold "#*#you do not have at least a gold membership#*#"
	#event WrongDiety "#*#You do not worship#*#"


| --------------------------------------------------------------------------------------------
| SUB: Main
| --------------------------------------------------------------------------------------------
Sub Main
    /squelch /echo This line is required so this macro can be called by another macro (e.g. GoTrain.mac).
	/declare HasVoA int outer 0
	/declare InvScribeSlot int outer 1

	/declare MyDeity string outer ${Me.Deity}
	/declare MaxInvSlots int outer 10
	/declare MinLevel int outer 1
	/declare MaxLevel int outer ${Me.Level}
	/declare DoLoop int outer 0
	/declare mName string outer
	/if (${Param0}) /varset MinLevel ${Param0}
	/if (${Param1}) /varset MaxLevel ${Param1}
	/if (${Me.HaveExpansion[Veil of Alaris]}) /varset HasVoA 1

:Start
	/varset DoLoop 0
	/if (${Merchant.Open}) {
		/varset mName ${Merchant.Name}
		/echo Buying all ${Me.Class} spells/tomes for levels ${MinLevel} to ${MaxLevel}
		/if (!${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,NEC]}) /call BuyTomes
		/if (!${Select[${Me.Class.ShortName},WAR,BER,MNK,ROG]}) /call BuySpells
		/delay 2s
	}
	/if (${Merchant.Open}) {
		/notify MerchantWnd MW_Done_Button leftmouseup
		/delay 1s !${Merchant.Open}
	}
	/if (!${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,NEC]} && ${Me.HaveExpansion[Call of the Forsaken]}) {
		/call ScribeTomes
	} else /if (!${Select[${Me.Class.ShortName},WAR,BER,MNK,ROG]} && !${Me.HaveExpansion[Call of the Forsaken]}) {
		/echo Emulator server detected
		/call ScribeSpellsEmu
	}
	/if (!${Select[${Me.Class.ShortName},WAR,BER,MNK,ROG]} && ${Me.HaveExpansion[Call of the Forsaken]}) {
		/call ScribeSpells
	} else /if (!${Select[${Me.Class.ShortName},CLR,DRU,SHM,ENC,WIZ,MAG,NEC]} && !${Me.HaveExpansion[Call of the Forsaken]}) {
		/echo Emulator server detected
		/call ScribeTomesEmu
	}
	/if (${DoLoop}) {
		/target ${mName}
		/delay 2s ${Target.ID}
		/click right target
		/delay 1s
		/goto :Start
	}
/return


| --------------------------------------------------------------------------------------------
| SUB: BuySpells
| --------------------------------------------------------------------------------------------
Sub BuySpells
	/if (!${Merchant.Open}) /return
	/delay 2s
	/if (!${Merchant.Items}) /return

	/declare a int local
	/declare b int local
	/declare c int local
	/declare SpellName string local

	/for a 1 to ${Merchant.Items}
		/if (!${Me.FreeInventory}) /return
		/if (!${Merchant.Open}) /return
		/varset c 0
		/varset SpellName ${Merchant.Item[${a}].Spell.Name}
		/if (${SpellName.Find[ Rk. II ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. II ,]}
		/if (${SpellName.Find[ Rk. III ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. III ,]}

		/if (${Merchant.Item[${a}].Type.Equal[Scroll]} && ${Merchant.Item[${a}].Spell.Level} >= ${MinLevel} && ${Merchant.Item[${a}].Spell.Level} <= ${MaxLevel} && ${Math.Calc[${Merchant.Item[${a}].BuyPrice}\1000]} < ${Me.Platinum} && !${Me.Book[${Merchant.Item[${a}].Spell.Name}]} && !${FindItemCount[${Merchant.Item[${a}]}]}) {
			/if (${Me.CombatAbility[${SpellName}]}) {
				/echo :: I already know ${SpellName}
			/continue
			}

			/if (${FindItemCount[${Merchant.Item[${a}]}]}) {
				/echo :: I already have ${Merchant.Item[${a}]} in inventory
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. II]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. II]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. III]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. III]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Merchant.Item[${a}].Deities} && ${MyDeity.NotEqual[${Merchant.Item[${a}].Deity[1]}]}) {
				/echo Unable to use ${SpellName} because of deity
			/continue
			}
			/if (${Me.Book[${SpellName} Rk. II]} || ${FindItemCount[${SpellName} Rk. II]}) {
				/echo Skipping lower rank of ${SpellName}
			/continue
			}
			/if (${Me.Book[${SpellName} Rk. III]} || ${FindItemCount[${SpellName} Rk. III]}) {
				/echo Skipping lower rank of ${SpellName}
			/continue
			}

		| this loop is needed because the merchant item number doesn't match up to the interface line number
			/for b 1 to ${Window[MerchantWnd].Child[MW_ItemList].Items}
				/if (${Window[MerchantWnd].Child[MW_ItemList].List[${b},2].Equal[${Merchant.Item[${a}]}]}) /varset c ${b}
			/next b

		| merchant line number matches what we are looking to buy, buy 1 copy of it
			/if (${c}) {
				/echo Buying ${Window[MerchantWnd].Child[MW_ItemList].List[${c},2]}
				/notify MerchantWnd MW_ItemList listselect ${c}
				/nomodkey /ctrlkey /notify MerchantWnd MW_Buy_Button leftmouseup
				/delay 1s
				/doevents
			}
		}
	/next a

/return


| --------------------------------------------------------------------------------------------
| SUB: ScribeSpells
| --------------------------------------------------------------------------------------------
Sub ScribeSpells
	/declare Bag int local
	/declare Slot int local
	/if (${Cursor.ID}) /autoinv
	|** Opening your inventory for access bag slots **|
	/if (!${Window[InventoryWindow].Open}) {
		/windowstate InventoryWindow open
	}
	|** Open all bags **|
	/keypress OPEN_INV_BAGS

	
	|** Check Top Level Inventory Slot for bag/no bag **|
	/for Bag 1 to ${MaxInvSlots}
		|** If it's a bag do this **|
		/if (${InvSlot[pack${Bag}].Item.Container}) {
			/if (!${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
			/delay 2s ${Window[Pack${Bag}].Open}

			/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
	
				/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
					|we can't right click to memorize a spell if it has a stack
					|to solve this we can call the Emu Spell Scribing
					/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].StackCount} > 1) /call ScribeSpellsEmu
					/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} rightmouseup
					/delay 1s ${Cursor.ID}
					/if (${Cursor.ID}) /call doScribe
				}
			/next Slot
			|** Close the bag I just checked **|
			/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
		} else {
			|** If it's not a bag, do this **|
			| Debug message /echo TopLevel Inv Slot ~ IsAScroll: ${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && Item Spell level: ${InvSlot[pack${Bag}].Item.Spell.Level} <= My Level: ${Me.Level} && Scribed Already: !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}
			/if (${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}) {
				/echo Scribing: ${InvSlot[Pack${Bag}].Item.Name}
				/nomodkey /ctrlkey /itemnotify pack${Bag} rightmouseup
				/delay 1s ${Cursor.ID}
				/if (${Cursor.ID}) /call doScribe
			}
		}
	/next Bag

	/if (${Window[SpellBookWnd].Open}) /squelch /windowstate SpellBookWnd close
/return


| --------------------------------------------------------------------------------------------
| SUB: doScribe
| --------------------------------------------------------------------------------------------
Sub doScribe
	/declare tOut timer local 10s

:WaitFinished
	/if (${Window[ConfirmationDialogBox].Open} && ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[${Cursor.Spell.Name} will replace]}) /notify ConfirmationDialogBox Yes_Button leftmouseup
	/if (!${tOut}) /autoinv
	/delay 2
	/doevents
	/if (${Cursor.ID}) /goto :WaitFinished
/return


| --------------------------------------------------------------------------------------------
| SUB: BuyTomes
| --------------------------------------------------------------------------------------------
Sub BuyTomes
	/if (!${Merchant.Open}) /return
	/delay 2s
	/if (!${Merchant.Items}) /return

	/declare a int local
	/declare b int local
	/declare c int local
	/declare SpellName string local

	/for a 1 to ${Merchant.Items}
		/if (!${Me.FreeInventory}) /return
		/varset c 0
		/varset SpellName ${Merchant.Item[${a}].Spell.Name}
		/if (${SpellName.Find[ Rk. II ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. II ,]}
		/if (${SpellName.Find[ Rk. III ]}) /varset SpellName ${Merchant.Item[${a}].Spell.Name.Replace[ Rk. III ,]}
	|/echo Item ${a} is ${Merchant.Item[${a}].Spell.Name}

		/if (${Merchant.Item[${a}].Type.Equal[Scroll]} && ${Merchant.Item[${a}].Spell.Level} >= ${MinLevel} && ${Merchant.Item[${a}].Spell.Level} <= ${MaxLevel} && ${Math.Calc[${Merchant.Item[${a}].BuyPrice}\1000]} < ${Me.Platinum}) {

			/if (${Me.CombatAbility[${SpellName}]}) {
				/echo :: I already know CombatAbility: ${SpellName}
			/continue
			}
			
			/if (${Me.Book[${SpellName}]}) {
				/echo :: I already know SpellName: ${SpellName}
			/continue
			}

			/if (${FindItemCount[${Merchant.Item[${a}]}]}) {
				/echo :: I already have ${Merchant.Item[${a}]} in inventory
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. II]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. II]}) {
				/echo :: Skipping lower rank of ${SpellName}
			/continue
			}

			/if (${Me.CombatAbility[${SpellName} Rk. III]} || ${FindItemCount[${Merchant.Item[${a}]} Rk. III]}) {
				/echo :: I already have the highest rank of ${SpellName}
			/continue
			}

		| this loop is needed because the merchant item number doesn't match up to the interface line number
			/for b 1 to ${Window[MerchantWnd].Child[MW_ItemList].Items}
				/if (${Window[MerchantWnd].Child[MW_ItemList].List[${b},2].Equal[${Merchant.Item[${a}]}]}) /varset c ${b}
			/next b

		| merchant line number matches what we are looking to buy, buy 1 copy of it
			/if (${c}) {
				/echo Buying ${Window[MerchantWnd].Child[MW_ItemList].List[${c},2]}
				/notify MerchantWnd MW_ItemList listselect ${c}
				/nomodkey /ctrlkey /notify MerchantWnd MW_Buy_Button leftmouseup
				/delay 1s
				/doevents
			}
		}
	/next a
/return


| --------------------------------------------------------------------------------------------
| SUB: ScribeTomes
| --------------------------------------------------------------------------------------------
Sub ScribeTomes
	/declare Bag int local
	/declare Slot int local

	/if (${Cursor.ID}) /autoinv

	/if (!${HasVoA} && ${InvSlot[pack${InvScribeSlot}].Item.Type.Equal[Scroll]} && ${InvSlot[pack${InvScribeSlot}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${InvScribeSlot}].Item.Spell.Name}]}) /nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} rightmouseup

	/for Bag 1 to ${MaxInvSlots}
		/if (${InvSlot[pack${Bag}].Item.Container}) {
			|need to open the bag if it isn't opened, and give it a second to do its thing.
			/if (!${Window[Pack${Bag}].Open}) { 
				/itemnotify pack${Bag} rightmouseup
				/delay 2s
			}
			/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
				/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].Name.Find[Tome]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
					|we can't right click to memorize a spell if it has a stack
					|to solve this we can call the Emu Spell Scribing
					/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].StackCount} > 1) /call ScribeTomesEmu
					
					/if (${HasVoA}) {
						/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} rightmouseup
						/delay 1s !${InvSlot[pack${Bag}].Item.Item[${Slot}].ID}
					} else {
						/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} leftmouseup
						/delay 1s ${Cursor.ID}
						/nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} leftmouseup
						/delay 1s !${Cursor.ID}
						/nomodkey /ctrlkey /itemnotify ${InvSlot[pack${InvScribeSlot}]} rightmouseup
						/delay 1s !${InvSlot[pack${InvScribeSlot}].ID}
					}
				}
			/next Slot
		}
		/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
	/next Bag
	/if (${Cursor.ID}) /autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_NotGold
| --------------------------------------------------------------------------------------------
Sub Event_NotGold
	/autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_WrongDiety
| --------------------------------------------------------------------------------------------
Sub Event_WrongDiety
	/autoinv
/return


| --------------------------------------------------------------------------------------------
| SUB: Event_FullInventory
| --------------------------------------------------------------------------------------------
Sub Event_FullInventory
	/if (${Merchant.Open}) {
		/notify MerchantWnd MW_Done_Button leftmouseup
		/delay 1s !${Merchant.Open}
	}
	/varset DoLoop 1

/return
|---------------------------------	
Sub ScribeSpellsEmu		
|---------------------------------	
		/declare i int local
		/declare Bag int local
		/declare Slot int local
		/declare tOut timer local 25s
		/declare lagClick timer local 2s
		/declare EmptySpellSlot int local
		/echo ScribeSpellsEmu
		/if (${Cursor.ID}) /autoinv
		|** Opening your inventory for access bag slots **|
		/if (!${Window[InventoryWindow].Open}) {
			/echo OpenInv
			/windowstate InventoryWindow open
			/delay 2s
		}
		/if (!${Window[SpellBookWnd].Open} && ${Me.MaxMana}) {
			/echo OpenSpellbk
			/windowstate SpellBookWnd open
			/delay 10s ${Window[SpellBookWnd].Open}
			/delay 1s
			/for i 1 to 44
				/invoke ${Window[SpellBookWnd].Child[SBW_PageDown_Button].LeftMouseUp}
			/next i
		}		
		|** Open all bags **|
		/keypress OPEN_INV_BAGS
		:emuSSlot
		|Find the next open slot in your spellbook
		/for i 1 to 720
			/if (${Me.Book[${i}].Name.Length}) {
				|/echo (${Math.Calc[${i} % 16]} == 1 && ${i} > 16)
				/if (${Math.Calc[${i} % 16]} == 1 && ${i} > 16) {
					/invoke ${Window[SpellBookWnd].Child[SBW_PageUp_Button].LeftMouseUp}
					|/echo Pgup1
					}
				/continue
			}
			/if (${Math.Calc[${i} % 16]} == 1 && ${i} > 16) {
				/invoke ${Window[SpellBookWnd].Child[SBW_PageUp_Button].LeftMouseUp}
				|/echo Pgup1
			}
			/varset EmptySpellSlot ${If[${i} <= 16,${Math.Calc[${i}-1]},${If[${Math.Calc[${i} % 16]} == 0,15,${Math.Calc[${i} % 16-1].Int}]}]}
			|/echo Empty slot is ${EmptySpellSlot} on ${i}
			/break
		/next i	
		|** Check Top Level Inventory Slot for bag/no bag **|
		/for Bag 1 to 10
			:emuFullPageBag
			|/echo Empty Slot is ${EmptySpellSlot}
			/if (${EmptySpellSlot} == 16) {
				/invoke ${Window[SpellBookWnd].Child[SBW_PageUp_Button].LeftMouseUp}
					|/echo Pgup3
				/varset EmptySpellSlot 0
				/delay 1s !${Me.Book[${EmptySpellSlot}].Name.Length}						
			}
			/if (${Me.Book[${EmptySpellSlot}].Name.Length}) {
				/for i 1 to 720
					/if (${Me.Book[${i}].Name.Length}) {
						/continue
					}
					/varset EmptySpellSlot ${If[${i} <= 16,${Math.Calc[${i}-1]},${If[${Math.Calc[${i} % 16]} == 0,15,${Math.Calc[${i} % 16-1].Int}]}]}]}
					|/echo Empty slot is ${EmptySpellSlot} on ${i}
					/break
				/next i	
				/if (${EmptySpellSlot} == 16) /goto :emuFullPageBag
			}
			|** If it's a bag do this **|
			/if (${InvSlot[pack${Bag}].Item.Container}) {
				/if (!${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
				/delay 1s ${Window[Pack${Bag}].Open}
				/delay 5
				/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
					:emuFullPageSlot
					/if (${EmptySpellSlot} == 16) {
						/invoke ${Window[SpellBookWnd].Child[SBW_PageUp_Button].LeftMouseUp}
						|/echo Pgup4
						/varset EmptySpellSlot 0
						/delay 1s !${Me.Book[${EmptySpellSlot}].Name.Length}						
					}
					/if (${Me.Book[${EmptySpellSlot}].Name.Length}) {
					/for i 1 to 720
						/if (${Me.Book[${i}].Name.Length}) {
							/continue
						}
						/varset EmptySpellSlot ${If[${i} <= 16,${Math.Calc[${i}-1]},${If[${Math.Calc[${i} % 16]} == 0,15,${Math.Calc[${i} % 16-1].Int}]}]}
						|/echo Empty slot is ${EmptySpellSlot} on ${i}
						/break
					/next i	
					}
					/if (${EmptySpellSlot} == 16) /goto :emuFullPageSlot
					/if (${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
						/echo Scribing: ${InvSlot[pack${Bag}].Item.Item[${Slot}]}
						/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} leftmouseup
						/delay 1s ${Cursor.ID}
						/varset tOut ${tOut.OriginalValue}
						/if (${Cursor.ID}) {
							/invoke ${Window[SpellBookWnd].Child[SBW_Spell${EmptySpellSlot}].LeftMouseUp}
							/delay 2						
							:WaitFinished
							/if (${Window[ConfirmationDialogBox].Open} && ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[${Cursor.Spell.Name} will replace]}) /notify ConfirmationDialogBox Yes_Button leftmouseup
							/if (!${lagClick}) {
								/if (${Me.Book[${EmptySpellSlot}].Name.Length}) {
									/for i 1 to 720
										/if (${Me.Book[${i}].Name.Length}) {
											/continue
										}
										/varset EmptySpellSlot ${If[${i} <= 16,${Math.Calc[${i}-1]},${If[${Math.Calc[${i} % 16]} == 0,15,${Math.Calc[${i} % 16-1].Int}]}]}
										|/echo Empty slot is ${EmptySpellSlot} on ${i}
										/break
									/next i	
								}
								/invoke ${Window[SpellBookWnd].Child[SBW_Spell${EmptySpellSlot}].LeftMouseUp}
								/varset lagClick ${lagClick.OriginalValue}
							}
							/if (!${tOut}) {
								/autoinv
							}
							/delay 2
							/doevents FullInventory
							/doevents NotGold
							/doevents WrongDiety
							/if (${Cursor.ID}) /goto :WaitFinished
						}
					}
					/varcalc EmptySpellSlot ${EmptySpellSlot}+1
				/next Slot
				|** Close the bag I just checked **|
				/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
			} else {
				|** If it's not a bag, do this **|
				| Debug message /echo TopLevel Inv Slot ~ IsAScroll: ${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && Item Spell level: ${InvSlot[pack${Bag}].Item.Spell.Level} <= My Level: ${Me.Level} && Scribed Already: !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}
				/if (${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]} && ${InvSlot[pack${Bag}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}) {
					/echo Scribing: ${InvSlot[Pack${Bag}].Item.Name}
					/nomodkey /ctrlkey /itemnotify "${FindItem[${InvSlot[Pack${Bag}].Item.Name}].Name}" leftmouseup
					/delay 1s ${Cursor.ID}
					/varset tOut ${tOut.OriginalValue}
					/if (${Cursor.ID}) {
						/delay 2
						/invoke ${Window[SpellBookWnd].Child[SBW_Spell${EmptySpellSlot}].LeftMouseUp}
						:WaitFinished
						/if (${Window[ConfirmationDialogBox].Open} && ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[${Cursor.Spell.Name} will replace]}) /notify ConfirmationDialogBox Yes_Button leftmouseup
						/if (!${tOut}) /autoinv
						/if (!${lagClick}) {
							/if (${Me.Book[${EmptySpellSlot}].Name.Length}) {
									/for i 1 to 720
										/if (${Me.Book[${i}].Name.Length}) {
											/continue
										}
										/varset EmptySpellSlot ${If[${i} <= 16,${Math.Calc[${i}-1]},${If[${Math.Calc[${i} % 16]} == 0,15,${Math.Calc[${i} % 16-1].Int}]}]}
										|/echo Empty slot is ${EmptySpellSlot} on ${i}
										/break
									/next i	
								}
							/invoke ${Window[SpellBookWnd].Child[SBW_Spell${EmptySpellSlot}].LeftMouseUp}
							/varset lagClick ${lagClick.OriginalValue}
						}
						/delay 2
						/doevents FullInventory
						/doevents NotGold
						/doevents WrongDiety
						/if (${Cursor.ID}) /goto :WaitFinished
						/varcalc EmptySpellSlot ${EmptySpellSlot}+1
						/if (${EmptySpellSlot} == 16) {
							/invoke ${Window[SpellBookWnd].Child[SBW_PageUp_Button].LeftMouseUp}
							|/echo Pgup5
							/varset EmptySpellSlot 0
							/delay 1s !${Me.Book[${EmptySpellSlot}].Name.Length}						
						}
					}
				}
			}
		/next Bag
		/if (${Window[SpellBookWnd].Open}) /squelch /windowstate SpellBookWnd close
	/return
| ----------------------------------------------------------------------------
	Sub ScribeTomesEmu
| ----------------------------------------------------------------------------	
		/declare Bag int local
		/declare Slot int local
		/varset HasVoA 1
		|/echo ScribeTomeEmu
		/if (${Cursor.ID}) /autoinv
		/keypress OPEN_INV_BAGS
		/delay 5
		/for Bag 1 to 10
			/if (${InvSlot[pack${Bag}].Item.Container}) {
				/if (!${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
				/delay 2s ${Window[Pack${Bag}].Open}
				/for Slot 1 to ${InvSlot[pack${Bag}].Item.Container}
					/if ((${InvSlot[pack${Bag}].Item.Item[${Slot}].Name.Find[Tome]} || ${InvSlot[pack${Bag}].Item.Item[${Slot}].Type.Equal[Scroll]}) && ${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell.Name}]}) {
						/if (${Me.CombatAbility[${InvSlot[pack${Bag}].Item.Item[${Slot}].Spell}]}) /continue
						/echo Scribing: ${InvSlot[pack${Bag}].Item.Item[${Slot}].Name}
						/if (${HasVoA}) {
							/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} rightmouseup
							/delay 1s !${InvSlot[pack${Bag}].Item.Item[${Slot}].ID}
						} else {
							/nomodkey /ctrlkey /itemnotify in pack${Bag} ${Slot} leftmouseup
							/delay 1s ${Cursor.ID}
							/nomodkey /ctrlkey /itemnotify ${InvSlot[pack1]} leftmouseup
							/delay 1s !${Cursor.ID}
							/nomodkey /ctrlkey /itemnotify ${InvSlot[pack1]} rightmouseup
							/delay 1s !${InvSlot[pack1].ID}
						}
					}
				/next Slot

		} else {
			/if ((${InvSlot[pack${Bag}].Item.Type.Equal[Tome]} || ${InvSlot[pack${Bag}].Item.Type.Equal[Scroll]}) && ${InvSlot[pack${Bag}].Item.Spell.Level} <= ${Me.Level} && !${Me.Book[${InvSlot[pack${Bag}].Item.Spell.Name}]}) {
					/if (${Me.CombatAbility[${InvSlot[Pack${Bag}].Item.Spell}]}) /continue
					/echo Scribing: ${InvSlot[Pack${Bag}].Item.Name}
					/nomodkey /ctrlkey /itemnotify pack${Bag} rightmouseup
					/delay 1s !${InvSlot[pack${Bag}].Item.ID}
					/if (${Cursor.ID}) {
						:WaitFinished
						/if (${Window[ConfirmationDialogBox].Open} && ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[${Cursor.Spell.Name} will replace]}) /notify ConfirmationDialogBox Yes_Button leftmouseup
						/delay 2
						/doevents FullInventory
						/doevents NotGold
						/doevents WrongDiety
						/if (${Cursor.ID}) /goto :WaitFinished
					}
				}
		}
			/if (${Window[Pack${Bag}].Open}) /itemnotify pack${Bag} rightmouseup
		/next Bag
		/if (${Cursor.ID}) /autoinv
	/return	